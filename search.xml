<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git的基本使用]]></title>
    <url>%2F2019%2F04%2F21%2FGit%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Git的基本使用Git的初始化 使用git config命令进行配置 $git config --global user.name &quot;Mr-Zhangheng&quot; $git config --global user.email &quot;1393640672@qq.com&quot; 执行了上面的命令后,会在根目录(/home/shiyanlou)下建立一个叫.gitconfig 的文件（该文件问隐藏文件，需要使用ls -al查看到）可以使用vim或cat查看文件内容：$cat ~/.gitconfig .gitconfig就是Git全局配置的文件 一般配置方法是`git config –global &lt;配置名字&gt; &lt;配置的值&gt; 如果想使项目里的某个值与前面的全局设置有区别(例如把私人邮箱地址改为工作邮箱),可以在项目中使用git config 命令不带 --global 选项来设置.这会在当前的项目目录下创建 .git/config，从而使用针对当前项目的配置。 获得一个Git仓库 两种方法:从已知的Git仓库中clone/新建一个仓库,把未进行版本控制的文件进行版本控制 Clone一个仓库 为了得到一个项目的拷贝(copy),我们需要知道这个项目仓库的地址(Git URL). Git能在许多协议下使用，所以Git URL可能以ssh://, http(s)://, git://开头. 有些仓库可以通过不只一种协议来访问 命令:$git clone 地址 在每行命令后面多了个(master),这是由于该Linux使用的是zsh Shell，zsh会判断当前的目录是否有Git仓库，如果是的话则自动把目前所在的git分支显示在提示符中 初始化一个新的仓库 创建代码目录:make project;cd project;git init –ls -la查看结果,会发现project目录下会有一个名叫.git 的目录被创建，这意味着一个仓库被初始化了。可以进入到.git目录查看下有哪些内容 #### 正常的工作流程 创建或修改文件–touch 使用git add命令添加新创建或修改的文件到本地的缓存区（Index） 使用git commit命令提交到本地代码库 可选，有的时候并没有可以同步的远端代码库）使用git push命令将本地代码库同步到远端代码库 example git status 命令查看当前git仓库的状态 现在为commit做好了准备，可以使用 git diff 命令再加上 –cached 参数，看看缓存区中哪些文件被修改了。进入到git diff –cached界面后需要输入q才可以退出;如果没有–cached参数，git diff 会显示当前你所有已做的但没有加入到索引里的修改; 当所有新建，修改的文件都被添加到了缓存区，我们就要使用git commit提交到本地仓库; 需要使用-m添加本次修改的注释，完成后就会记录一个新的项目版本 再次输入git status查看状态，会发现当前的代码库已经没有待提交的文件了，缓存区已经被清空–至此，我们完成了第一次代码提交 如果是修改文件，也需要使用git add命令添加到缓存区才可以提交。如果是删除文件，则直接使用git rm命令删除后会自动将已删除文件的信息添加到缓存区，git commit提交后就会将本地仓库中的对应文件删除6. 如果本地的仓库连接到了远程Git服务器，可以使用下面的命令将本地仓库同步到远端服务器：$ git push origin master 分支与合并 Git的分支可以让你在主线（master分支）之外进行代码提交，同时又不会影响代码库主线 分支 运行git branch命令可以查看当前的分支列表，以及目前的开发环境处在哪个分支上 –星号标识了当下工作在哪个分支下 git checkout 分支1可以切换到分支1 由于两个branch修改了两个不同的文件，所以合并时不会有冲突;如果有冲突，比如两个分支都改了一个文件file3，则合并时会失败–git merge -m &quot;注释信息&quot; 将要被合并的分支名 git branch -d 分支名只能删除那些已经被当前分支的合并的分支. 如果你要强制删除某个分支的话就用git branch –D 查看Git日志 git log可以显示所有的提交(commit) ##### 日志统计 git log --stat ##### 日志排序 总结基本命令: git config：配置相关信息 git clone：复制仓库 git init：初始化仓库 git add：添加更新内容到索引中 git diff：比较内容 git status：获取当前项目状况 git commit：提交 git branch：分支相关 git checkout：切换分支 git merge：合并分支 git reset：恢复版本 git log：查看日志 Git应用形象介绍 https://www.cnblogs.com/wupeiqi/p/7295372.html 常用命令https://images2018.cnblogs.com/blog/359884/201711/359884-20171128123923050-1074438610.png]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub使用指南]]></title>
    <url>%2F2019%2F04%2F21%2FGitHub%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[GitHub使用指南创建分支 在分支上所做的更改不会影响master分支，因此可以自由地进行实验和提交更改，并且分支将不会合并，直到准备好与正在协作的人进行审核 master分支中的任何内容始终都是可部署的 在处理功能或修复时，创建新分支非常重要。您的分行名称应该是描述性的,例如make-retina-avatars , user-content-cache-key; 添加提交 无论何时添加，编辑或删除文件，都要进行提交，并将它们添加到分支。添加提交的过程会在处理功能分支时跟踪进度 提交还可以创建一份透明的工作历史记录，其他人可以遵循这些历史记录来了解已完成的工作和原因 每个提交都被视为一个单独的变更单位 如果发现错误，或者决定朝不同方向前进，则可以回滚更改 提交消息很重要，特别是因为Git会跟踪更改，然后在将它们推送到服务器后将其显示为提交。通过编写清晰的提交消息，可以更轻松地让其他人跟进并提供反馈 打开拉取请求 Pull Requests对于贡献开源项目和管理对共享存储库的更改很有用。 如果使用的是Fork＆Pull模型，则Pull Requests提供了一种向项目维护人员通知希望他们考虑的更改的方法。 如果使用的是共享存储库模型，则Pull Requests会在合并到主分支之前帮助启动代码审查和有关建议更改的对话。 讨论并检查代码 一旦拉开请求被打开，审核您的更改的人员或团队可能会有问题或意见 GitHub将在统一的Pull Request视图中显示您的新提交以及您可能收到的任何其他反馈 Pull Request注释是用Markdown编写的，因此可以嵌入图像和表情符号，使用预先格式化的文本块和其他轻量级格式 部署 使用GitHub，可以在合并到master之前从分支部署进行生产中的最终测试 如果分支导致问题，可以通过将现有主数据库部署到生产中来回滚它 合并 将代码合并到主分支中,合并后，Pull Requests会保留代码历史更改的记录 因为它们是可搜索的，所以任何人都可以及时回过头来理解为什么以及如何做出决定。 通过将某些关键字合并到Pull请求的文本中，可以将问题与代码相关联。合并Pull请求后，相关问题也将关闭。例如，输入短语Closes #32将关闭存储库中的第32个问题。 GitHub实践–项目提交创建和使用存储库GitHub简介 GitHub是用于版本控制和协作的代码托管平台;在任何地方与任何人协同工作;存储库/分支/提交/Pull请求 创建存储库 一个库通常用于举办单个项目 存储库可以包含文件夹和文件，图像，视频，电子表格和数据集 - 项目需要的任何内容 建议包括README或包含项目信息的文件 创建新存储库 在右上角，在头像或identicon旁边，单击 + 然后选择New repository 命名存储库 写一个简短的描述 选择使用自述文件初始化此存储库 单击创建存储库 启动和管理新分支创建一个分支 分支是一次在不同版本的存储库上工作的方式 默认情况下，存储库有一个名为branch的分支master，它被认为是权威分支。使用分支进行实验并在提交之前进行编辑master 当在分支机构上创建分支时master，正在创建该master时间点的副本或快照。如果其他人master在分支机构工作时对分支进行了更改，则可以引入这些更新。 在GitHub，开发人员，编写人员和设计人员使用分支来保持错误修复和功能工作与master（生产）分支分开。当更改准备就绪时， 创建一个新分支 转到存储库 单击文件列表顶部的下拉列表：master：master 在新分支文本框中键入分支名称 选择蓝色的创建分支框或按键盘上的“Enter” 现在有两个分支，master和readme-edits。它们看起来完全一样，接下来，将更改添加到新分支。 对文件进行更改并将其作为提交推送到GitHub概括 在GitHub上，保存的更改称为提交 每个提交都有一个关联的提交消息，这是一个解释为什么进行特定更改的描述 提交消息可捕获更改的历史记录，因此其他贡献者可以了解您已完成的操作和原因 制作并提交更改 单击新分支下的该README.md文件 点击要编辑的文件视图右上角的铅笔图标 在编辑器中，写下该分支的简介信息 编写描述更改的提交消息 单击提交更改按钮 这些更改将只对新分支上的README文件进行，因此现在此分支包含的内容与之不同master 打开并合并拉取请求打开Pull请求 Pull Requests是GitHub上合作的核心。当打开拉取请求时，提出了更改并请求某人审核并提取自己的贡献并将其合并到他们的分支中 Pull Requests显示来自两个分支的内容的差异或差异。更改，添加和减少以绿色和红色显示 提交后，即使在代码完成之前，您也可以打开拉取请求并开始讨论 可以在自己的存储库中打开pull请求并自行合并;在开展大型项目之前，这是学习GitHub流程的好方法 打开Pull Request以更改READMEGit手册版本控制系统 版本控制系统或VCS会跟踪人员和团队一起协作项目时的更改历史记录。 随着项目的发展，团队可以运行测试，修复错误并提供新代码，并确信任何版本都可以随时恢复。 开发人员可以查看项目历史记录以找出 做了哪些更改 是谁做出了改变 什么时候做出改变 为什么需要更改 分布式版本控制系统 Git是分布式版本控制系统（DVCS）; DVCS允许完全访问项目的每个文件，分支和迭代，并允许每个用户访问所有更改的完整且自包含的历史记录 关于Git Git允许开发人员在一个地方查看他们的变更，决策和任何项目进展的整个时间表 关于存储库 一个仓库，或Git项目，包括与项目相关的文件和文件夹的整个集合，每个文件的修订历史记录一起。 文件历史记录显示为称为提交的快照，并且提交作为链接列表关系存在，并且可以组织成称为分支的多个开发行。 由于Git是DVCS，因此存储库是自包含单元，拥有存储库副本的任何人都可以访问整个代码库及其历史记录。 使用命令行或其他易用的接口，git存储库还允许：与历史记录，克隆，创建分支，提交，合并，比较代码版本之间的更改等进行交互 基本Git命令 基本命令:git init;git clone;git add;git commit;git status;git branch;git merge;git pull;git push 详细命令参考:https://git-scm.com/docs Git简要命令:https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Basic-Snapshotting Github帮助:https://help.github.com/en/articles/git-and-github-learning-resources 协作开发方式共享存储库 使用共享存储库，个人和团队被明确指定为具有读取，写入或管理员访问权限的贡献者 fork和pull fork and pull模型允许任何可以查看项目的人做出贡献。 fork是开发人员个人帐户下项目的副本。 每个开发人员都可以完全控制他们的分支，并可以自由地实现修复或新功能。 在fork中完成的工作要么保持独立，要么通过拉动请求浮现回原始项目。在那里，维护人员可以在合并之前查看建议的更改 Fork简介 fork:使用GitHub一段时间后，自己想要为其他人的项目做出贡献。或者，希望将某人的项目作为自己的起点。 创建“fork”正在生成其他人项目的个人副本 Forks充当原始存储库和自己的个人副本之间的桥梁。可以提交Pull请求，通过提供原始项目的更改来帮助改善其他人的项目。 fork是GitHub社交编码的核心 步骤 点击fork clone/download 暂存并提交更改 make a Puull Request 转到项目所在存储库,单击Compare and Pull Request,输入标题和可选说明–提供尽可能多的信息 点击发送Pull Request 即可 DOIMarkDownPad2https://help.github.com/en/categories/writing-on-github 通过Git上传文件夹至GitHub基本设置 参考文章(有错误) https://www.cnblogs.com/xiaosongbiog/p/7003601.html 绑定用户:打开git-bash.exe 因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识 用户和邮箱为你github注册的账号和邮箱 git config –global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定的不同的用户名和邮箱 命令: git config --global user.name &quot;Mr-Zhangheng&quot; git config --global user.email &quot;1393640672@qq.com&quot; 为GitHub账户设置SSH key 原理: ssh key是加密传输 git使用rsa，rsa要解决的一个核心问题是，如何使用一对特定的数字，使其中一个数字可以用来加密，而另外一个数字可以用来解密 这两个数字就是在使用git和github的时候所遇到的public key也就是公钥以及private key私钥 公钥就是那个用来加密的数字，这也就是为什么你在本机生成了公钥之后，要上传到github的原因。从github发回来的，用那公钥加密过的数据，可以用你本地的私钥来还原 生成ssh key: 首先检查是否已生成密钥 cd ~/.ssh，ls如果有3个文件，则密钥已经生成，id_rsa.pub就是公钥 如果没有生成，那么通过$ ssh-keygen -t rsa -C “1393640672@qq.com”来生成。 1 是路径确认，直接按回车存默认路径即可 2 直接回车键，这里我们不使用密码进行登录, 用密码太麻烦 3 直接回车键 生成成功后，去对应目录用记事本打开id_rsa.pub，得到ssh key公钥 –对应目录C:\Users**.ssh里（**为电脑用户名，每个人不同） 为GitHub账户配置ssh key 切换到github，展开个人头像的小三角，点击settings 打开SSH keys菜单， 点击Add SSH key新增密钥，填上标题，跟仓库保持一致吧，好区分 接着将id_rsa.pub文件中key粘贴到此，最后Add key生成密钥 github账号的SSH keys配置完成 上传本地项目到github 在你要上传工程的顶级目录（工程目录）下右键，git bash here 命令: git init 初始化成功后会发现项目里多了一个隐藏文件夹.git 这个目录是Git用来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了 将所有文件添加到仓库 命令: git add . 把文件提交到仓库，双引号内是提交注释 命令: git commit -m &quot;提交信息简介&quot; 如此本地仓库建立好了 关联github仓库 到github的相应仓库复制仓库ssh地址 执行命令: git remote add origin git@github.com:Mr-Zhangheng/Java.git –注意git@github.com:Mr-Zhangheng/Java.git是仓库ssh地址 代码合并 命令:git pull --rebase origin master –注:pull = fetch + merge 上传本地代码 执行指令: git push -u origin master 上传成功 git是不能管理空的文件夹的，文件夹里必须有文件才能上传 删除GitHub中的某个文件或者文件夹 在Github上我们只能删除仓库，并不能删除文件或者文件夹，所以只能用命令来解决 本地仓库和远程仓库同时删除只删除远程仓库,不删除本地仓库 远程仓库即GitHub仓库,本地仓库即Git仓库git rm file_path;git commit -m &quot;delete_info&quot;;git push;删除暂存区或者分支上的文件,同时工作区也不再需要这个文件git rm --cached file_path;git commit -m &quot;delete remote somefile&quot;;git push;需要删除暂存区或分支上的文件,但本地依然需要使用,只是不希望这个文件被版本控制 先用git打开本地要操作的仓库，然后把远程仓库拉到本地;git pull origin master https://img-blog.csdn.net/20180806200300939?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pc2hpd29kZWJvY2FpMjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70 使用dir /ls -a查看远程仓库包含的文件，文件夹。（可以不操作） git rm -r --cached filename 选择删除你要删除的文件或者文件夹–注: -r参数是循环删除,一般是用来删除目录(文件夹) git commit -m &quot;具体删除日志信息&quot; 交操作信息日志，方便以后查看 git push origin master 把修改后的内容push到远程仓库完成删除操作;操作结束 git回滚图 https://images2017.cnblogs.com/blog/425762/201708/425762-20170812194454960-1674213106.png]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub + Hexo 个人博客网站搭建]]></title>
    <url>%2F2019%2F04%2F20%2FGitHub-Hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[创建仓库 仓库名应该为：用户名.github.io 这个用户名使用你的GitHub帐号名称代替，这是固定写法 安装Git 安装Node.js :Hexo基于Node.js 安装Node.js会包含环境变量及npm的安装 安装后，检测Node.js是否安装成功，在命令行中输入 node -v 检测npm是否安装成功，在命令行中输入npm -v 安装Hexo 在本地新建文件夹,Hexo框架和以后自己发布的网页都会在这个文件夹中.右击文件夹打开Git Bash 输入命令npm install -g hexo-cli 输入命令hexo -v验证是否安装成功 初始化文件 hexo init blog –站点被初始化在了blog文件中… 推送网站 在blog根目录里的_config.yml文件称为站点配置文件 进入根目录里的themes文件夹，里面也有个_config.yml文件，这个称为主题配置文件 将Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为: deploy: type: git repo: 这里填入之前在GitHub上创建仓库的完整路径，记得加上 .git branch: master 其实就是给hexo d 这个命令做相应的配置，让hexo知道要把blog部署在哪个位置 npm install hexo-deployer-git --save #安装Git部署插件 依次输入hexo clean hexo g hexo d;打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 GitHub用户名.github.io即可浏览博客 以上操作均在/Blog/blog文件夹下进行 绑定域名 需要自行购买阿里云/腾讯云域名—此步可略过 更换为NexT主题 在blog路径下,把默认主题更改为Next主题: 命令git clone https://github.com/iissnan/hexo-theme-next themes/next 这是将Next主题下载到blog目录的themes主题下的next文件夹中 打开 站点配置文件， 找到 theme 字段，并将其值更改为 next 首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 hexo s --debug Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可 编辑 站点配置文件， 将 language 设置成你所需要的语言 英语 代码:en 简体中文 代码: zh-Hans 编辑 主题配置文件，修改菜单项: 默认菜单项有6个:Home,archives,categories,tags,about,commonweal–后面四个需要手动创建这个页面 设置菜单项的显示文本:翻译文本放置在 NexT 主题目录下的 languages/{language}.yml （{language} 为你所使用的语言) 以简体中文为例，若你需要添加一个菜单项，比如 something。那么就需要修改简体中文对应的翻译文件 languages/zh-Hans.yml，在 menu 字段下添加一项 :something: 有料 设定菜单项的图标，对应的字段是 menu_icons,可以设置成 false 来去掉图标 默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改 主题配置文件 中的 sidebar 字段来控制侧栏的行为 设置侧栏的位置，修改 sidebar.position 的值 设置侧栏显示的时机，修改 sidebar.display 的值 编辑 主题配置文件， 修改字段 avatar， 值设置成头像的链接地址 放置在 source/images/ 目录下 配置为：avatar: /images/avatar.png 编辑 站点配置文件， 设置 author 为你的昵称 编辑 站点配置文件， 设置 description 字段为你的站点描述。站点描述可以是你喜欢的一句签名 设置阅读全文: auto_excerpt: enable: true length: 150 //首页显示150截取字符长度的内容 添加标签页面 hexo new page tags source文件夹下有了tags/index.md，打开index.md文件,在最后的—上面一行添加type: “tags” 设置具体文章的tags:当要为某一篇文章添加标签，只需在blog/source/_post目录下的具体文章的tags中添加标签即可: tags: [npm, hexo, github],在日期的下一行添加即可,注意空格 添加分类 hexo new page &quot;categories&quot; 在站点目录下的source文件夹下，会新增一个categories的文件夹，里面有一个index.md文件 在最后加上两行:type: &quot;categories&quot; comments: false comments可以设置为false，含义是打开分类页面，评论插件不显示；如要显示则改为true 设置具体文章的categories:当要为某一篇文章添加分类，只需在blog/source/_post目录下的具体文章的categories中添加标签即可: categories: 搭建博客,在日期的下一行添加即可,注意空格 添加about hexo new page &quot;about&quot; 其余步骤同tags和categories 其他主题设置参考官网文档:http://theme-next.iissnan.com/theme-settings.html参考博文:https://blog.csdn.net/u011475210/article/details/79023429https://www.cnblogs.com/php-linux/p/8416116.htmlhttps://www.cnblogs.com/php-linux/p/8416116.htmlhttps://blog.csdn.net/u012443858/article/details/60812982https://www.jianshu.com/p/35e197cb1273https://zhuanlan.zhihu.com/p/33616481 包括: 设置RSS 站点建立时间 设置代码高亮主题 侧边栏社交链接 开启打赏功能 搜索服务:algolia 设置博文内链接为蓝色 显示每篇文章字数 显示站点文章总字数 文章末尾添加版权说明 修改文章底部的#号标签 添加needmoreshare2分享 添加文章更新时间 集成常用的第三方服务 百度统计: 登录 百度统计(https://tongji.baidu.com/web/welcome/login)， 定位到站点的代码获取页面 复制 hm.js? 后面那串统计脚本 id 编辑 主题配置文件， 修改字段 baidu_analytics 字段，值设置成你的百度统计脚本 id 该功能已成功加入，大约过20min后在百度统计上可以看到站点的访问情况 阅读量统计: LeanCloud 其他个性化设计 给页面添加背景图片 在theme/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加代码 文字背景色以及半透明的设置 在theme/next/source/css/_custom文件夹下打开custom.styl文件，往里面添加以下代码 常用的Hexo命令 npm install hexo -g #安装Hexo npm update hexo -g #升级 hexo init #初始化博客 命令简写: hexo algolia #更新搜索服务–更新文章之后 hexo n “my blog” == hexo new “my blog” #新建文章 hexo g == hexo generate #生成 hexo s == hexo server #启动服务预览 hexo d == hexo deploy #部署 hexo server #Hexo会监视文件变动并自动更新，无须重启服务器 hexo server -s #静态模式 hexo server -p 5000 #更改端口 hexo server -i 192.168.1.1 #自定义 IP hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令 详细参考资料: https://blog.csdn.net/u011475210/article/details/79023429 ## NexT文档: http://theme-next.iissnan.com/getting-started.html ## Hexo指令文档:https://hexo.io/zh-cn/docs/commands.html]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F03%2F21%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
